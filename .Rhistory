tabel <- tabel_gsadf(gsadf_u)
tabel
tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) * 100
price_change_longest <- format(round(price_change_longest,2), nsmall = 2)
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = ""),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel
tabel <- tabel_gsadf(gsadf_u)
tabel
View(tabel)
library(GSADF.AAU)
library(GSADF.AAU)
Tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) * 100
price_change_longest <- format(round(price_change_longest,2), nsmall = 2)
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = " "),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(GSADF.AAU)
gsadf <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 5,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01,
own_df_distribution = NULL)
head(gsadf)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
library(GSADF.AAU)
gsadf <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 5,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01,
own_df_distribution = NULL)
head(gsadf)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
Tabel_GSADF <- function(gsadf) {
max_data <- tibble::tibble(gsadf$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf$stock$price[interval_longest$end_day] -
gsadf$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf$stock$price[base::max(interval_longest$start_day,1)]) * 100
price_change_longest <- format(round(price_change_longest,2), nsmall = 2)
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = " "),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
tabel_gsadf <- Tabel_GSADF(gsadf = gsadf)
tabel_gsadf
source('D:/OneDrive - Aalborg Universitet/GSADF_AAU/GSADF.AAU/R/plot_GSADF.R', echo=TRUE)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
source('D:/OneDrive - Aalborg Universitet/GSADF_AAU/GSADF.AAU/R/plot_GSADF.R', echo=TRUE)
library(GSADF.AAU)
gsadf <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 5,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01,
own_df_distribution = NULL)
head(gsadf)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
llibrary(styler)
library(styler)
styler:::style_active_file()
styler:::style_active_file()
combined_count <- function(u = NULL, d = NULL, d_t = NULL, p_restrict = 0.95) {
t <- seq_along(u$stock$date)
date <- u$stock$date
modeltype <- dplyr::case_when(
!is.null(u) & is.null(d) & is.null(d_t) ~ 1,
!is.null(u) & !is.null(d) & is.null(d_t) ~ 2,
!is.null(u) & !is.null(d) & !is.null(d_t) ~ 3
)
if (!is.null(u)) {
plot_u <- u$result %>% dplyr::filter(p_val >= p_restrict)
}
if (!is.null(d)) {
plot_d <- d$result %>% dplyr::filter(p_val >= p_restrict)
}
if (!is.null(d_t)) {
plot_d_t <- d_t$result %>% dplyr::filter(p_val >= p_restrict)
}
combined_u <- c()
combined_d <- c()
combined_d_t <- c()
for (i in seq_along(t)) {
if (!is.null(u)) {
combined_u[i] <-
sum(i >= plot_u$start_day & i <= plot_u$end_day)
}
if (!is.null(d)) {
combined_d[i] <-
sum(i >= plot_d$start_day & i <= plot_d$end_day)
}
if (!is.null(d_t)) {
combined_d_t[i] <-
sum(i >= plot_d_t$start_day & i <= plot_d_t$end_day)
}
}
if (modeltype == 1) {
combined_df <- data.frame(x = date, u = combined_u)
}
if (modeltype == 2) {
combined_df <- data.frame(x = date, u = combined_u,
d = combined_d)
}
if (modeltype == 3) {
combined_df <- data.frame(x = date, u = combined_u,
d = combined_d,
d_t = combined_d_t)
}
return(combined_df %>% tidyr::pivot_longer(-1) %>%
dplyr::mutate(name = factor(name, levels = c("u", "d", "d_t"))))
}
#' @param T_val Sample size
#' @param seed Random seed
#' @param sd_rv Standard deviation for white noise
#' @param y_0 Starting value
#' @param n_monte Number of simulations, should be in the thousands
#' @param T_vals_only TRUE if only the T values are wanted, if FALSE more things are returned
#' @param drift FALSE if no drift
#' @param trend FALSE if no trend
#' @return ADF distribution for AR(1)
#' @export
DF_distribution <- function(T_val = 100, seed = 12345,
sd_rv = 1, y_0 = 1, n_monte = 10,
T_vals_only = T, drift = F, trend = F) {
set.seed(seed)
t_vector <- c()
list_t_greater_0 <- list()
t_val_model_nr <- dplyr::case_when(
drift == F & trend == F ~ 1,
drift == T & trend == F ~ 2,
drift == F & trend == T ~ 2,
drift == T & trend == T ~ 3
)
for (j in 1:n_monte) {
y <- c()
y[1] <- y_0
y_fin <- c()
for (i in 2:(T_val + 50)) {
eps <- rnorm(1, mean = 0, sd = sd_rv)
y[i] <- y[i - 1] + eps
}
y_fin <- y[(50 + 1):(T_val + 50)]
data <- tibble::tibble(
t = 1:T_val,
y = y_fin
)
if (drift == F & trend == F) {
model <- lm(diff(y) ~ lag(y)[2:T_val] + 0, data = data)
}
if (drift == T & trend == F) {
model <- lm(diff(y) ~ na.omit(lag(y)), data = data)
}
if (drift == F & trend == T) {
model <- lm(diff(y) ~ 0 + t[-1] + na.omit(dplyr::lag(y)), data = data)
}
if (drift == T & trend == T) {
model <- lm(diff(y) ~ t[-1] + na.omit(dplyr::lag(y)), data = data)
}
t_vector[j] <- summary(model)$coefficients[t_val_model_nr, 3]
}
if (T_vals_only == F) {
t_95 <- sort(t_vector, decreasing = T)[n_monte * 0.95]
t_99 <- sort(t_vector, decreasing = T)[n_monte * 0.99]
}
if (T_vals_only == T) {
list_return <- t_vector
}
if (T_vals_only == F) {
list_return <- list(
t_vector = t_vector,
quantile_95 = t_95,
quantile_99 = t_99,
list_0 = list_t_greater_0
)
}
return(list_return)
}
discount <- function(p, r = 0.01) {
p / (1 + r / 365)^(base::seq_along(p))
}
GSADF <- function(ticker, x = NULL, min_window = 30,
step_length = 5, window_increase = 10,
date_from = "1900-01-01", date_to = base::Sys.Date(),
drift = F, trend = F, risk_free_rate = 0.01, own_df_distribution = NULL) {
if (base::is.null(x)) {
stock_data <- tidyquant::tq_get(ticker, from = date_from, to = date_to) %>%
dplyr::select(date, adjusted) %>%
stats::na.omit()
x <- discount(p = stock_data$adjusted, r = risk_free_rate)
date_x <- stock_data$date
}
nrow_x <- base::length(x)
window_size <- min_window
t_val_model_nr <- dplyr::case_when(
drift == F & trend == F ~ 1,
drift == T & trend == F ~ 2,
drift == T & trend == T ~ 3
)
if (base::is.null(own_df_distribution)) {
# distri_tibbles <- c(
#   "DF_distri",
#   "DF_distri_drift",
#   "DF_distri_drift_trend"
# )
# load(distri_tibbles[t_val_model_nr])
# utils::data(distri_tibbles[t_val_model_nr], envir=base::environment())
distribution_tibble <- if (t_val_model_nr == 1) {
df_distri
} else if (t_val_model_nr == 2) {
df_distri_drift
} else if (t_val_model_nr == 3) {
df_distri_drift_trend
}
} else
{distribution_tibble <- own_df_distribution}
result <- tibble::tibble()
k_ind <- 1
while (window_size < (nrow_x - step_length)) {
max_i <- base::floor((nrow_x - window_size) / step_length)
for (i in 0:max_i) {
x_window <- x[(step_length * i):((step_length * i) + window_size)]
plot_data <- tibble::tibble(t = base::seq_along(x_window), x_window)
if (drift == F & trend == F) {
model <- stats::lm(base::diff(x_window) ~ 0 + stats::na.omit(dplyr::lag(x_window)), data = plot_data)
}
if (drift == T & trend == F) {
model <- stats::lm(base::diff(x_window) ~ stats::na.omit(dplyr::lag(x_window)), data = plot_data)
}
if (drift == T & trend == T) {
model <- stats::lm(base::diff(x_window) ~ t[-1] + stats::na.omit(dplyr::lag(x_window)), data = plot_data)
}
coef_model <- stats::coefficients(base::summary(model))
result[k_ind, "estimate"] <- coef_model[t_val_model_nr, 1]
result[k_ind, "std_error"] <- coef_model[t_val_model_nr, 2]
result[k_ind, "t_value"] <- coef_model[t_val_model_nr, 3]
result[k_ind, "start_day"] <- step_length * i
result[k_ind, "end_day"] <- ((step_length * i) + window_size)
result[k_ind, "interval_length"] <- window_size
k_ind <- k_ind + 1
}
window_size <- window_size + window_increase
}
result <- result %>%
dplyr::rowwise() %>%
dplyr::mutate(p_val = p_val_fun(
t_val = t_value,
interval_length = interval_length,
distribution_tibble = distribution_tibble
))
result_list <- base::list(
stock = tibble::tibble(
date = date_x,
price = x
),
result = result
)
base::return(result_list)
}
styler:::style_active_file()
GSADF <- function(ticker, x = NULL, min_window = 30, step_length = 5,
window_increase = 10, date_from = "1900-01-01", date_to = base::Sys.Date(),
drift = F, trend = F, risk_free_rate = 0.01, own_df_distribution = NULL) {
if (base::is.null(x)) {
stock_data <- tidyquant::tq_get(ticker,
from = date_from,
to = date_to
) %>%
dplyr::select(date, adjusted) %>%
stats::na.omit()
x <- discount(p = stock_data$adjusted, r = risk_free_rate)
date_x <- stock_data$date
}
nrow_x <- base::length(x)
window_size <- min_window
t_val_model_nr <- dplyr::case_when(drift == F & trend ==
F ~ 1, drift == T & trend == F ~ 2, drift == T & trend ==
T ~ 3)
if (base::is.null(own_df_distribution)) {
distribution_tibble <- if (t_val_model_nr == 1) {
df_distri
}
else if (t_val_model_nr == 2) {
df_distri_drift
}
else if (t_val_model_nr == 3) {
df_distri_drift_trend
}
}
else {
distribution_tibble <- own_df_distribution
}
result <- tibble::tibble()
k_ind <- 1
while (window_size < (nrow_x - step_length)) {
max_i <- base::floor((nrow_x - window_size) / step_length)
for (i in 0:max_i) {
x_window <- x[(step_length * i):((step_length *
i) + window_size)]
plot_data <- tibble::tibble(
t = base::seq_along(x_window),
x_window
)
if (drift == F & trend == F) {
model <- stats::lm(base::diff(x_window) ~ 0 +
stats::na.omit(dplyr::lag(x_window)), data = plot_data)
}
if (drift == T & trend == F) {
model <- stats::lm(base::diff(x_window) ~ stats::na.omit(dplyr::lag(x_window)),
data = plot_data
)
}
if (drift == T & trend == T) {
model <- stats::lm(base::diff(x_window) ~ t[-1] +
stats::na.omit(dplyr::lag(x_window)), data = plot_data)
}
coef_model <- stats::coefficients(base::summary(model))
result[k_ind, "estimate"] <- coef_model[
t_val_model_nr,
1
]
result[k_ind, "std_error"] <- coef_model[
t_val_model_nr,
2
]
result[k_ind, "t_value"] <- coef_model[
t_val_model_nr,
3
]
result[k_ind, "start_day"] <- step_length * i
result[k_ind, "end_day"] <- ((step_length * i) +
window_size)
result[k_ind, "interval_length"] <- window_size
k_ind <- k_ind + 1
}
window_size <- window_size + window_increase
}
result <- result %>%
dplyr::rowwise() %>%
dplyr::mutate(p_val = p_val_fun(
t_val = t_value,
interval_length = interval_length, distribution_tibble = distribution_tibble
))
result_list <- base::list(stock = tibble::tibble(
date = date_x,
price = x
), result = result)
base::return(result_list)
}
p_val_fun <- function(t_val, interval_length, distribution_tibble) {
if (interval_length %% 10 == 0) {
sum(t_val > distribution_tibble[
,
paste("T_val_", interval_length, sep = "")
]) /
nrow(distribution_tibble)
} else
if (interval_length %% 10 != 0) {
column <- paste("T_val_", plyr::round_any(interval_length, 10), sep = "")
sum(t_val > distribution_tibble[, column]) / nrow(distribution_tibble)
}
}
library(GSADF.AAU)
