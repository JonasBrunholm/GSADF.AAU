iinstall.packages("dplyr")
install.packages("tidyverse")
install.packages("tidyquant")
install.packages("plyr")
grid.arrange()
?grid.arrange
??grid.arrange
install.packages("gridExtra")
devtools::document()
load("D:/OneDrive - Aalborg Universitet/0P7/P7_R/DF_distribution.RData")
devtools::use_data(df_distri)
use_data(df_distri)
devtools::install_version()
install.packages("usethat")
usethis::use_data(df_distri)
load("D:/OneDrive - Aalborg Universitet/0P7/P7_R/DF_distribution_drift.RData")
load("D:/OneDrive - Aalborg Universitet/0P7/P7_R/DF_distribution_drift_trend.RData")
usethis::use_data(df_distri_drift)
usethis::use_data(df_distri_drift_trend)
library(GSADF.AAU)
usethis::use_readme_rmd()
usethis::use_pipe()
devtools::document()
usethis::use_pipe()
usethis::use_pipe()
Sys.setenv(language="en")
library(GSADF.AAU)
devtools::document()
Sys.setenv(language="en")
library(GSADF.AAU)
library(GSADF.AAU)
devtools::document()
devtools::load_all()
library(GSADF.AAU)
usethis::use_readme_rmd()
usethis::use_readme_rmd()
usethis::use_readme_rmd()
gsadf_u <- GSADF.AAU::GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 1,
window_increase = 1,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01)
Sys.setenv(language="en")
gsadf_u <- GSADF.AAU::GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 1,
window_increase = 1,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01)
library(GSADF.AAU)
gsadf_u <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 1,
window_increase = 1,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01)
library(GSADF.AAU)
library(GSADF.AAU)
load("D:/OneDrive - Aalborg Universitet/GSADF_AAU/GSADF.AAU/data/df_distri.rda")
library(GSADF.AAU)
library(GSADF.AAU)
utils::data("df_distri", envir=environment())
force(df_distri)
library(GSADF.AAU)
library(GSADF.AAU)
gsadf_u <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 1,
window_increase = 1,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01)
discount <- function(p, r = 0.01) {
p / (1 + r / 365)^(base::seq_along(p))
}
detach("package:GSADF.AAU", unload = TRUE)
library(GSADF.AAU)
gsadf_u <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 10,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01)
library(GSADF.AAU)
gsadf_u <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 10,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01)
View(gsadf_u)
install.packages("styler")
styler:::style_active_file()
tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1,1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- (gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]
first_date_data <- max_data %>% dplyr::slice_min(start_day)
first_date_interval <- lubridate::ymd(start_date) +
base::c(first_date_data$start_day, first_date_data$end_day)
last_date_data <- max_data %>% dplyr::slice_max(end_day)
last_date_interval <- lubridate::ymd(start_date) +
base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = price_change_longest,
first_date_interval = first_date_interval,
last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel <- tabel_gsadf(gsadf_u)
tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- (gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]
first_date_data <- max_data %>% dplyr::slice_min(start_day)
first_date_interval <- lubridate::ymd(start_date) +
base::c(first_date_data$start_day, first_date_data$end_day)
last_date_data <- max_data %>% dplyr::slice_max(end_day)
last_date_interval <- lubridate::ymd(start_date) +
base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = price_change_longest,
first_date_interval = first_date_interval,
last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel <- tabel_gsadf(gsadf_u)
View(tabel)
tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- (gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = price_change_longest,
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel <- tabel_gsadf(gsadf_u)
View(tabel)
tabel
tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) * 100
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = ""),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel <- tabel_gsadf(gsadf_u)
tabel
tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) * 100
price_change_longest <- format(round(price_change_longest,2), nsmall = 2)
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = ""),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel
tabel <- tabel_gsadf(gsadf_u)
tabel
View(tabel)
library(GSADF.AAU)
library(GSADF.AAU)
Tabel_gsadf <- function(gsadf) {
max_data <- tibble::tibble(gsadf_u$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf_u$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf_u$stock$price[interval_longest$end_day] -
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf_u$stock$price[base::max(interval_longest$start_day,1)]) * 100
price_change_longest <- format(round(price_change_longest,2), nsmall = 2)
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = " "),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(GSADF.AAU)
gsadf <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 5,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01,
own_df_distribution = NULL)
head(gsadf)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
library(GSADF.AAU)
gsadf <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 5,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01,
own_df_distribution = NULL)
head(gsadf)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
Tabel_GSADF <- function(gsadf) {
max_data <- tibble::tibble(gsadf$result) %>%
dplyr::filter(p_val == base::max(p_val))
start_date <- gsadf$stock$date[1]
count <- max_data %>% base::nrow()
value <- max_data$p_val[1]
interval_longest <- max_data %>% dplyr::slice_max(interval_length)
interval_longest_values <- c(interval_longest$start_day + lubridate::ymd(start_date),
interval_longest$end_day + lubridate::ymd(start_date))
price_change_longest <- ((gsadf$stock$price[interval_longest$end_day] -
gsadf$stock$price[base::max(interval_longest$start_day,1)]) /
gsadf$stock$price[base::max(interval_longest$start_day,1)]) * 100
price_change_longest <- format(round(price_change_longest,2), nsmall = 2)
# first_date_data <- max_data %>% dplyr::slice_min(start_day)
# first_date_interval <- lubridate::ymd(start_date) +
#   base::c(first_date_data$start_day, first_date_data$end_day)
#
# last_date_data <- max_data %>% dplyr::slice_max(end_day)
# last_date_interval <- lubridate::ymd(start_date) +
#   base::c(last_date_data$start_day, last_date_data$end_day)
mean_startday <- base::mean(max_data$start_day) + lubridate::ymd(start_date)
mean_endday <- base::mean(max_data$end_day) + lubridate::ymd(start_date)
output <- base::list(count = count,
value = value,
interval_longest = interval_longest_values,
price_change_longest = paste(price_change_longest, "%", sep = " "),
# first_date_interval = first_date_interval,
# last_date_interval = last_date_interval,
mean_startday = mean_startday,
mean_endday = mean_endday)
base::return(output)
# hvor mange
# hvad den er
# interval på det længste
# price change i procent
# første dato helt interval
# sidste dato helt interval
}
tabel_gsadf <- Tabel_gsadf(gsadf = gsadf)
tabel_gsadf <- Tabel_GSADF(gsadf = gsadf)
tabel_gsadf
source('D:/OneDrive - Aalborg Universitet/GSADF_AAU/GSADF.AAU/R/plot_GSADF.R', echo=TRUE)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
source('D:/OneDrive - Aalborg Universitet/GSADF_AAU/GSADF.AAU/R/plot_GSADF.R', echo=TRUE)
library(GSADF.AAU)
gsadf <- GSADF(ticker = "btc-usd",
x = NULL,
min_window = 60,
step_length = 5,
window_increase = 10,
date_from = "2020-01-01",
date_to = "2020-12-01",
drift = F,
trend = F,
risk_free_rate = 0.01,
own_df_distribution = NULL)
head(gsadf)
plot_GSADF(u = gsadf,
d = NULL,
d_t = NULL,
p_restrict = 0.95,
start_date_tq_get = "2020-01-01",
image_name = NULL,
valuta = "USD",
aktie = "Bitcoin")
llibrary(styler)
library(styler)
